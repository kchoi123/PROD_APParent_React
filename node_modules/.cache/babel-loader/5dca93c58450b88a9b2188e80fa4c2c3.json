{"ast":null,"code":"import React, { createContext, Component, Children, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return _extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  _extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return _assign.apply(this, arguments);\n};\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nvar animateUnflippedElements = function animateUnflippedElements(_a) {\n  var unflippedIds = _a.unflippedIds,\n      flipCallbacks = _a.flipCallbacks,\n      getElement = _a.getElement,\n      flippedElementPositionsBeforeUpdate = _a.flippedElementPositionsBeforeUpdate,\n      flippedElementPositionsAfterUpdate = _a.flippedElementPositionsAfterUpdate,\n      inProgressAnimations = _a.inProgressAnimations;\n  var enteringElementIds = unflippedIds.filter(function (id) {\n    return flippedElementPositionsAfterUpdate[id];\n  });\n  var animatedEnteringElementIds = enteringElementIds.filter(function (id) {\n    return flipCallbacks[id] && flipCallbacks[id].onAppear;\n  });\n  var animatedExitingElementIds = unflippedIds.filter(function (id) {\n    return flippedElementPositionsBeforeUpdate[id] && flipCallbacks[id] && flipCallbacks[id].onExit;\n  }); // make sure appearing elements aren't taken into account by the filterFlipDescendants function\n\n  enteringElementIds.forEach(function (id) {\n    var element = getElement(id);\n\n    if (element) {\n      element.dataset.isAppearing = 'true';\n    }\n  });\n\n  var hideEnteringElements = function hideEnteringElements() {\n    animatedEnteringElementIds.forEach(function (id) {\n      var element = getElement(id);\n\n      if (element) {\n        element.style.opacity = '0';\n      }\n    });\n  };\n\n  var animateEnteringElements = function animateEnteringElements() {\n    animatedEnteringElementIds.forEach(function (id, i) {\n      var element = getElement(id);\n\n      if (element) {\n        flipCallbacks[id].onAppear(element, i);\n      }\n    });\n  };\n\n  var closureResolve;\n  var promiseToReturn = new Promise(function (resolve) {\n    closureResolve = resolve;\n  });\n  var fragmentTuples = [];\n  var exitingElementCount = 0;\n  var onExitCallbacks = animatedExitingElementIds.map(function (id, i) {\n    var _a = flippedElementPositionsBeforeUpdate[id].domDataForExitAnimations,\n        element = _a.element,\n        parent = _a.parent,\n        _b = _a.childPosition,\n        top = _b.top,\n        left = _b.left,\n        width = _b.width,\n        height = _b.height; // insert back into dom\n\n    if (getComputedStyle(parent).position === 'static') {\n      parent.style.position = 'relative';\n    }\n\n    element.style.transform = 'matrix(1, 0, 0, 1, 0, 0)';\n    element.style.position = 'absolute';\n    element.style.top = top + 'px';\n    element.style.left = left + 'px'; // taken out of the dom flow, the element might have lost these dimensions\n\n    element.style.height = height + 'px';\n    element.style.width = width + 'px';\n    var fragmentTuple = fragmentTuples.filter(function (t) {\n      return t[0] === parent;\n    })[0];\n\n    if (!fragmentTuple) {\n      fragmentTuple = [parent, document.createDocumentFragment()];\n      fragmentTuples.push(fragmentTuple);\n    }\n\n    fragmentTuple[1].appendChild(element);\n    exitingElementCount += 1;\n\n    var stop = function stop() {\n      try {\n        parent.removeChild(element);\n      } catch (DOMException) {// the element is already gone\n      } finally {\n        exitingElementCount -= 1;\n\n        if (exitingElementCount === 0) {\n          closureResolve();\n        }\n      }\n    };\n\n    inProgressAnimations[id] = {\n      stop: stop\n    };\n    return function () {\n      return flipCallbacks[id].onExit(element, i, stop);\n    };\n  }); // now append all the fragments from the onExit callbacks\n  // (we use fragments for performance)\n\n  fragmentTuples.forEach(function (t) {\n    var parent = t[0];\n    var fragment = t[1];\n    parent.appendChild(fragment);\n  });\n\n  if (!onExitCallbacks.length) {\n    closureResolve();\n  }\n\n  var animateExitingElements = function animateExitingElements() {\n    onExitCallbacks.forEach(function (c) {\n      return c();\n    });\n    return promiseToReturn;\n  };\n\n  return {\n    hideEnteringElements: hideEnteringElements,\n    animateEnteringElements: animateEnteringElements,\n    animateExitingElements: animateExitingElements\n  };\n};\n/*! @license Rematrix v0.2.2\n\n\tCopyright 2018 Fisssion LLC.\n\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\n\tof this software and associated documentation files (the \"Software\"), to deal\n\tin the Software without restriction, including without limitation the rights\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\tcopies of the Software, and to permit persons to whom the Software is\n\tfurnished to do so, subject to the following conditions:\n\n\tThe above copyright notice and this permission notice shall be included in\n\tall copies or substantial portions of the Software.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\tTHE SOFTWARE.\n*/\n\n/**\n * @module Rematrix\n */\n\n/**\n * Transformation matrices in the browser come in two flavors:\n *\n *  - `matrix` using 6 values (short)\n *  - `matrix3d` using 16 values (long)\n *\n * This utility follows this [conversion guide](https://goo.gl/EJlUQ1)\n * to expand short form matrices to their equivalent long form.\n *\n * @param  {array} source - Accepts both short and long form matrices.\n * @return {array}\n */\n\n\nfunction format(source) {\n  if (source.constructor !== Array) {\n    throw new TypeError('Expected array.');\n  }\n\n  if (source.length === 16) {\n    return source;\n  }\n\n  if (source.length === 6) {\n    var matrix = identity();\n    matrix[0] = source[0];\n    matrix[1] = source[1];\n    matrix[4] = source[2];\n    matrix[5] = source[3];\n    matrix[12] = source[4];\n    matrix[13] = source[5];\n    return matrix;\n  }\n\n  throw new RangeError('Expected array with either 6 or 16 values.');\n}\n/**\n * Returns a matrix representing no transformation. The product of any matrix\n * multiplied by the identity matrix will be the original matrix.\n *\n * > **Tip:** Similar to how `5 * 1 === 5`, where `1` is the identity.\n *\n * @return {array}\n */\n\n\nfunction identity() {\n  var matrix = [];\n\n  for (var i = 0; i < 16; i++) {\n    i % 5 == 0 ? matrix.push(1) : matrix.push(0);\n  }\n\n  return matrix;\n}\n/**\n * Returns a 4x4 matrix describing the combined transformations\n * of both arguments.\n *\n * > **Note:** Order is very important. For example, rotating 45°\n * along the Z-axis, followed by translating 500 pixels along the\n * Y-axis... is not the same as translating 500 pixels along the\n * Y-axis, followed by rotating 45° along on the Z-axis.\n *\n * @param  {array} m - Accepts both short and long form matrices.\n * @param  {array} x - Accepts both short and long form matrices.\n * @return {array}\n */\n\n\nfunction multiply(m, x) {\n  var fm = format(m);\n  var fx = format(x);\n  var product = [];\n\n  for (var i = 0; i < 4; i++) {\n    var row = [fm[i], fm[i + 4], fm[i + 8], fm[i + 12]];\n\n    for (var j = 0; j < 4; j++) {\n      var k = j * 4;\n      var col = [fx[k], fx[k + 1], fx[k + 2], fx[k + 3]];\n      var result = row[0] * col[0] + row[1] * col[1] + row[2] * col[2] + row[3] * col[3];\n      product[i + k] = result;\n    }\n  }\n\n  return product;\n}\n/**\n * Attempts to return a 4x4 matrix describing the CSS transform\n * matrix passed in, but will return the identity matrix as a\n * fallback.\n *\n * **Tip:** In virtually all cases, this method is used to convert\n * a CSS matrix (retrieved as a `string` from computed styles) to\n * its equivalent array format.\n *\n * @param  {string} source - String containing a valid CSS `matrix` or `matrix3d` property.\n * @return {array}\n */\n\n\nfunction parse(source) {\n  if (typeof source === 'string') {\n    var match = source.match(/matrix(3d)?\\(([^)]+)\\)/);\n\n    if (match) {\n      var raw = match[2].split(', ').map(parseFloat);\n      return format(raw);\n    }\n  }\n\n  return identity();\n}\n/**\n * Returns a 4x4 matrix describing X-axis scaling.\n *\n * @param  {number} scalar - Decimal multiplier.\n * @return {array}\n */\n\n\nfunction scaleX(scalar) {\n  var matrix = identity();\n  matrix[0] = scalar;\n  return matrix;\n}\n/**\n * Returns a 4x4 matrix describing Y-axis scaling.\n *\n * @param  {number} scalar - Decimal multiplier.\n * @return {array}\n */\n\n\nfunction scaleY(scalar) {\n  var matrix = identity();\n  matrix[5] = scalar;\n  return matrix;\n}\n/**\n * Returns a 4x4 matrix describing X-axis translation.\n *\n * @param  {number} distance - Measured in pixels.\n * @return {array}\n */\n\n\nfunction translateX(distance) {\n  var matrix = identity();\n  matrix[12] = distance;\n  return matrix;\n}\n/**\n * Returns a 4x4 matrix describing Y-axis translation.\n *\n * @param  {number} distance - Measured in pixels.\n * @return {array}\n */\n\n\nfunction translateY(distance) {\n  var matrix = identity();\n  matrix[13] = distance;\n  return matrix;\n}\n\nvar isNumber = function isNumber(x) {\n  return typeof x === 'number';\n};\n\nvar isFunction = function isFunction(x) {\n  return typeof x === 'function';\n};\n\nvar isObject = function isObject(x) {\n  return Object.prototype.toString.call(x) === '[object Object]';\n};\n\nvar toArray = function toArray(arrayLike) {\n  return Array.prototype.slice.apply(arrayLike);\n};\n\nvar getDuplicateValsAsStrings = function getDuplicateValsAsStrings(arr) {\n  var obj = arr.reduce(function (acc, curr) {\n    acc[curr] = (acc[curr] || 0) + 1;\n    return acc;\n  }, {});\n  return Object.keys(obj).filter(function (val) {\n    return obj[val] > 1;\n  });\n}; // tslint only likes this with a regular function, not an arrow function\n\n\nfunction assign(target) {\n  var args = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n\n  args.forEach(function (arg) {\n    if (!arg) {\n      return;\n    } // Skip over if undefined or null\n\n\n    for (var nextKey in arg) {\n      // Avoid bugs when hasOwnProperty is shadowed\n      if (Object.prototype.hasOwnProperty.call(arg, nextKey)) {\n        target[nextKey] = arg[nextKey];\n      }\n    }\n  });\n  return target;\n} // adapted from\n// https://github.com/chenglou/react-motion/blob/master/src/presets.js\n\n\nvar springPresets = {\n  noWobble: {\n    stiffness: 200,\n    damping: 26\n  },\n  gentle: {\n    stiffness: 120,\n    damping: 14\n  },\n  veryGentle: {\n    stiffness: 130,\n    damping: 17\n  },\n  wobbly: {\n    stiffness: 180,\n    damping: 12\n  },\n  stiff: {\n    stiffness: 260,\n    damping: 26\n  }\n};\n\nvar getSpringConfig = function getSpringConfig(_a) {\n  var _b = _a === void 0 ? {} : _a,\n      flipperSpring = _b.flipperSpring,\n      flippedSpring = _b.flippedSpring;\n\n  var normalizeSpring = function normalizeSpring(spring) {\n    if (isObject(spring)) {\n      return spring;\n    } else if (springPresets[spring]) {\n      return springPresets[spring];\n    } else {\n      return {};\n    }\n  };\n\n  return assign({}, springPresets.noWobble, normalizeSpring(flipperSpring), normalizeSpring(flippedSpring));\n};\n\nvar DATA_FLIP_ID = 'data-flip-id';\nvar DATA_INVERSE_FLIP_ID = 'data-inverse-flip-id';\nvar DATA_FLIP_CONFIG = 'data-flip-config';\nvar DATA_PORTAL_KEY = 'data-portal-key';\nvar DATA_EXIT_CONTAINER = 'data-exit-container';\nvar DATA_IS_APPEARING = 'data-is-appearing'; // scoped selector makes sure we're querying inside the right Flipper\n// container, either internally or with the right portal key\n\nvar selectFlipChildIds = function selectFlipChildIds(scopedSelector, selector, flippedIds) {\n  var childIds = scopedSelector(selector).map(function (el) {\n    return el.dataset.flipId;\n  }); // now return an array ordered by the original order in the DOM\n\n  return flippedIds.filter(function (id) {\n    return childIds.indexOf(id) > -1;\n  });\n};\n\nvar baseSelector = \"[\" + DATA_FLIP_ID + \"]:not([\" + DATA_IS_APPEARING + \"])\";\n\nvar filterFlipDescendants = function filterFlipDescendants(_a) {\n  var flipDataDict = _a.flipDataDict,\n      flippedIds = _a.flippedIds,\n      scopedSelector = _a.scopedSelector;\n  var levelToChildren = {};\n\n  var buildHierarchy = function buildHierarchy(selector, level, oldResult) {\n    var newSelector = selector + \" \" + baseSelector; // make sure this is scoped to the Flipper element in case there are\n    // mulitiple Flipper elements on the page\n\n    var newResult = selectFlipChildIds(scopedSelector, newSelector, flippedIds);\n    var oldLevelChildren = oldResult.filter(function (id) {\n      return newResult.indexOf(id) === -1;\n    });\n    levelToChildren[level] = oldLevelChildren;\n    oldLevelChildren.forEach(function (childId) {\n      if (flipDataDict[childId]) {\n        flipDataDict[childId].level = level;\n      }\n    });\n\n    if (newResult.length !== 0) {\n      buildHierarchy(newSelector, level + 1, newResult);\n    }\n  }; // the top level selectChildFlipIds should use the scopedSelector\n\n\n  buildHierarchy(baseSelector, 0, selectFlipChildIds(scopedSelector, baseSelector, flippedIds)); // now make sure childIds in each flippedData contains only direct children\n  // since to enable nested stagger we want each parent to be able to kick off\n  // the animations only for its direct children\n\n  Object.keys(flipDataDict).forEach(function (flipId) {\n    var data = flipDataDict[flipId]; // scope by parent element\n\n    data.childIds = selectFlipChildIds(function (selector) {\n      return toArray(data.element.querySelectorAll(selector));\n    }, baseSelector, flippedIds);\n    data.childIds = data.childIds.filter(function (id) {\n      return levelToChildren[data.level + 1] && levelToChildren[data.level + 1].indexOf(id) > -1;\n    });\n  });\n  return levelToChildren['0'];\n};\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n *  Copyright (c) 2013, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n *\n *\n */\n\n\nvar _onFrame;\n\nif (typeof window !== \"undefined\") {\n  _onFrame = window.requestAnimationFrame;\n}\n\n_onFrame = _onFrame || function (callback) {\n  window.setTimeout(callback, 1000 / 60);\n};\n\nvar _onFrame$1 = _onFrame;\n\nfunction onFrame(func) {\n  return _onFrame$1(func);\n}\n\nvar start = Date.now();\nvar performanceNow = (typeof performance === \"undefined\" ? \"undefined\" : _typeof(performance)) === \"object\" && typeof performance.now === \"function\" ? function () {\n  return performance.now();\n} : function () {\n  return Date.now() - start;\n}; // Lop off the first occurence of the reference in the Array.\n\nfunction removeFirst(array, item) {\n  var idx = array.indexOf(item);\n  idx !== -1 && array.splice(idx, 1);\n}\n/**\n * Plays each frame of the SpringSystem on animation\n * timing loop. This is the default type of looper for a new spring system\n * as it is the most common when developing UI.\n * @public\n */\n\n\nvar AnimationLooper =\n/*#__PURE__*/\nfunction () {\n  function AnimationLooper() {\n    _classCallCheck(this, AnimationLooper);\n  }\n\n  _createClass(AnimationLooper, [{\n    key: \"run\",\n    value: function run() {\n      var _this = this;\n\n      onFrame(function () {\n        _this.springSystem.loop(performanceNow());\n      });\n    }\n  }]);\n\n  return AnimationLooper;\n}();\n\nvar PhysicsState = function PhysicsState() {\n  _classCallCheck(this, PhysicsState);\n\n  this.position = 0;\n  this.velocity = 0;\n};\n/**\n * Provides a model of a classical spring acting to\n * resolve a body to equilibrium. Springs have configurable\n * tension which is a force multipler on the displacement of the\n * spring from its rest point or `endValue` as defined by [Hooke's\n * law](http://en.wikipedia.org/wiki/Hooke's_law). Springs also have\n * configurable friction, which ensures that they do not oscillate\n * infinitely. When a Spring is displaced by updating it's resting\n * or `currentValue`, the SpringSystems that contain that Spring\n * will automatically start looping to solve for equilibrium. As each\n * timestep passes, `SpringListener` objects attached to the Spring\n * will be notified of the updates providing a way to drive an\n * animation off of the spring's resolution curve.\n * @public\n */\n\n\nvar Spring =\n/*#__PURE__*/\nfunction () {\n  function Spring(springSystem) {\n    _classCallCheck(this, Spring);\n\n    this._id = \"s\" + Spring._ID++;\n    this._springSystem = springSystem;\n    this.listeners = [];\n    this._startValue = 0;\n    this._currentState = new PhysicsState();\n    this._displacementFromRestThreshold = 0.001;\n    this._endValue = 0;\n    this._overshootClampingEnabled = false;\n    this._previousState = new PhysicsState();\n    this._restSpeedThreshold = 0.001;\n    this._tempState = new PhysicsState();\n    this._timeAccumulator = 0;\n    this._wasAtRest = true;\n  }\n\n  _createClass(Spring, [{\n    key: \"getId\",\n    value: function getId() {\n      return this._id;\n    }\n    /**\n     * Remove a Spring from simulation and clear its listeners.\n     * @public\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.listeners = [];\n\n      this._springSystem.deregisterSpring(this);\n    }\n    /**\n     * Set the configuration values for this Spring. A SpringConfig\n     * contains the tension and friction values used to solve for the\n     * equilibrium of the Spring in the physics loop.\n     * @public\n     */\n\n  }, {\n    key: \"setSpringConfig\",\n    value: function setSpringConfig(springConfig) {\n      this._springConfig = springConfig;\n      return this;\n    }\n    /**\n     * Retrieve the current value of the Spring.\n     * @public\n     */\n\n  }, {\n    key: \"getCurrentValue\",\n    value: function getCurrentValue() {\n      return this._currentState.position;\n    }\n    /**\n     * Get the absolute distance of the Spring from a given state value\n     */\n\n  }, {\n    key: \"getDisplacementDistanceForState\",\n    value: function getDisplacementDistanceForState(state) {\n      return Math.abs(this._endValue - state.position);\n    }\n    /**\n     * Set the endValue or resting position of the spring. If this\n     * value is different than the current value, the SpringSystem will\n     * be notified and will begin running its solver loop to resolve\n     * the Spring to equilibrium. Any listeners that are registered\n     * for onSpringEndStateChange will also be notified of this update\n     * immediately.\n     * @public\n     */\n\n  }, {\n    key: \"setEndValue\",\n    value: function setEndValue(endValue) {\n      if (this._endValue === endValue && this.isAtRest()) {\n        return this;\n      }\n\n      this._startValue = this.getCurrentValue();\n      this._endValue = endValue;\n\n      this._springSystem.activateSpring(this.getId());\n\n      for (var i = 0, len = this.listeners.length; i < len; i++) {\n        var listener = this.listeners[i];\n        var onChange = listener.onSpringEndStateChange;\n        onChange && onChange(this);\n      }\n\n      return this;\n    }\n    /**\n     * Set the current velocity of the Spring, in pixels per second. As\n     * previously mentioned, this can be useful when you are performing\n     * a direct manipulation gesture. When a UI element is released you\n     * may call setVelocity on its animation Spring so that the Spring\n     * continues with the same velocity as the gesture ended with. The\n     * friction, tension, and displacement of the Spring will then\n     * govern its motion to return to rest on a natural feeling curve.\n     * @public\n     */\n\n  }, {\n    key: \"setVelocity\",\n    value: function setVelocity(velocity) {\n      if (velocity === this._currentState.velocity) {\n        return this;\n      }\n\n      this._currentState.velocity = velocity;\n\n      this._springSystem.activateSpring(this.getId());\n\n      return this;\n    }\n    /**\n     * Enable overshoot clamping. This means that the Spring will stop\n     * immediately when it reaches its resting position regardless of\n     * any existing momentum it may have. This can be useful for certain\n     * types of animations that should not oscillate such as a scale\n     * down to 0 or alpha fade.\n     * @public\n     */\n\n  }, {\n    key: \"setOvershootClampingEnabled\",\n    value: function setOvershootClampingEnabled(enabled) {\n      this._overshootClampingEnabled = enabled;\n      return this;\n    }\n    /**\n     * Check if the Spring has gone past its end point by comparing\n     * the direction it was moving in when it started to the current\n     * position and end value.\n     * @public\n     */\n\n  }, {\n    key: \"isOvershooting\",\n    value: function isOvershooting() {\n      var start = this._startValue;\n      var end = this._endValue;\n      return this._springConfig.tension > 0 && (start < end && this.getCurrentValue() > end || start > end && this.getCurrentValue() < end);\n    }\n    /**\n     * The main solver method for the Spring. It takes\n     * the current time and delta since the last time step and performs\n     * an RK4 integration to get the new position and velocity state\n     * for the Spring based on the tension, friction, velocity, and\n     * displacement of the Spring.\n     * @public\n     */\n\n  }, {\n    key: \"advance\",\n    value: function advance(time, realDeltaTime) {\n      var isAtRest = this.isAtRest();\n\n      if (isAtRest && this._wasAtRest) {\n        return;\n      }\n\n      var adjustedDeltaTime = realDeltaTime;\n\n      if (realDeltaTime > Spring.MAX_DELTA_TIME_SEC) {\n        adjustedDeltaTime = Spring.MAX_DELTA_TIME_SEC;\n      }\n\n      this._timeAccumulator += adjustedDeltaTime;\n      var tension = this._springConfig.tension;\n      var friction = this._springConfig.friction;\n      var position = this._currentState.position;\n      var velocity = this._currentState.velocity;\n      var tempPosition = this._tempState.position;\n      var tempVelocity = this._tempState.velocity;\n      var aVelocity;\n      var aAcceleration;\n      var bVelocity;\n      var bAcceleration;\n      var cVelocity;\n      var cAcceleration;\n      var dVelocity;\n      var dAcceleration;\n      var dxdt;\n      var dvdt;\n\n      while (this._timeAccumulator >= Spring.SOLVER_TIMESTEP_SEC) {\n        this._timeAccumulator -= Spring.SOLVER_TIMESTEP_SEC;\n\n        if (this._timeAccumulator < Spring.SOLVER_TIMESTEP_SEC) {\n          this._previousState.position = position;\n          this._previousState.velocity = velocity;\n        }\n\n        aVelocity = velocity;\n        aAcceleration = tension * (this._endValue - tempPosition) - friction * velocity;\n        tempPosition = position + aVelocity * Spring.SOLVER_TIMESTEP_SEC * 0.5;\n        tempVelocity = velocity + aAcceleration * Spring.SOLVER_TIMESTEP_SEC * 0.5;\n        bVelocity = tempVelocity;\n        bAcceleration = tension * (this._endValue - tempPosition) - friction * tempVelocity;\n        tempPosition = position + bVelocity * Spring.SOLVER_TIMESTEP_SEC * 0.5;\n        tempVelocity = velocity + bAcceleration * Spring.SOLVER_TIMESTEP_SEC * 0.5;\n        cVelocity = tempVelocity;\n        cAcceleration = tension * (this._endValue - tempPosition) - friction * tempVelocity;\n        tempPosition = position + cVelocity * Spring.SOLVER_TIMESTEP_SEC;\n        tempVelocity = velocity + cAcceleration * Spring.SOLVER_TIMESTEP_SEC;\n        dVelocity = tempVelocity;\n        dAcceleration = tension * (this._endValue - tempPosition) - friction * tempVelocity;\n        dxdt = 1.0 / 6.0 * (aVelocity + 2.0 * (bVelocity + cVelocity) + dVelocity);\n        dvdt = 1.0 / 6.0 * (aAcceleration + 2.0 * (bAcceleration + cAcceleration) + dAcceleration);\n        position += dxdt * Spring.SOLVER_TIMESTEP_SEC;\n        velocity += dvdt * Spring.SOLVER_TIMESTEP_SEC;\n      }\n\n      this._tempState.position = tempPosition;\n      this._tempState.velocity = tempVelocity;\n      this._currentState.position = position;\n      this._currentState.velocity = velocity;\n\n      if (this._timeAccumulator > 0) {\n        this._interpolate(this._timeAccumulator / Spring.SOLVER_TIMESTEP_SEC);\n      }\n\n      if (this.isAtRest() || this._overshootClampingEnabled && this.isOvershooting()) {\n        if (this._springConfig.tension > 0) {\n          this._startValue = this._endValue;\n          this._currentState.position = this._endValue;\n        } else {\n          this._endValue = this._currentState.position;\n          this._startValue = this._endValue;\n        }\n\n        this.setVelocity(0);\n        isAtRest = true;\n      }\n\n      var notifyActivate = false;\n\n      if (this._wasAtRest) {\n        this._wasAtRest = false;\n        notifyActivate = true;\n      }\n\n      var notifyAtRest = false;\n\n      if (isAtRest) {\n        this._wasAtRest = true;\n        notifyAtRest = true;\n      }\n\n      this.notifyPositionUpdated(notifyActivate, notifyAtRest);\n    }\n  }, {\n    key: \"notifyPositionUpdated\",\n    value: function notifyPositionUpdated(notifyActivate, notifyAtRest) {\n      for (var i = 0, len = this.listeners.length; i < len; i++) {\n        var listener = this.listeners[i];\n\n        if (notifyActivate && listener.onSpringActivate) {\n          listener.onSpringActivate(this);\n        }\n\n        if (listener.onSpringUpdate) {\n          listener.onSpringUpdate(this);\n        }\n\n        if (notifyAtRest && listener.onSpringAtRest) {\n          listener.onSpringAtRest(this);\n        }\n      }\n    }\n    /**\n     * Check if the SpringSystem should advance. Springs are advanced\n     * a final frame after they reach equilibrium to ensure that the\n     * currentValue is exactly the requested endValue regardless of the\n     * displacement threshold.\n     * @public\n     */\n\n  }, {\n    key: \"systemShouldAdvance\",\n    value: function systemShouldAdvance() {\n      return !this.isAtRest() || !this.wasAtRest();\n    }\n  }, {\n    key: \"wasAtRest\",\n    value: function wasAtRest() {\n      return this._wasAtRest;\n    }\n    /**\n     * Check if the Spring is atRest meaning that it's currentValue and\n     * endValue are the same and that it has no velocity. The previously\n     * described thresholds for speed and displacement define the bounds\n     * of this equivalence check. If the Spring has 0 tension, then it will\n     * be considered at rest whenever its absolute velocity drops below the\n     * restSpeedThreshold.\n     * @public\n     */\n\n  }, {\n    key: \"isAtRest\",\n    value: function isAtRest() {\n      return Math.abs(this._currentState.velocity) < this._restSpeedThreshold && (this.getDisplacementDistanceForState(this._currentState) <= this._displacementFromRestThreshold || this._springConfig.tension === 0);\n    }\n  }, {\n    key: \"_interpolate\",\n    value: function _interpolate(alpha) {\n      this._currentState.position = this._currentState.position * alpha + this._previousState.position * (1 - alpha);\n      this._currentState.velocity = this._currentState.velocity * alpha + this._previousState.velocity * (1 - alpha);\n    }\n  }, {\n    key: \"addListener\",\n    value: function addListener(newListener) {\n      this.listeners.push(newListener);\n      return this;\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(listenerToRemove) {\n      removeFirst(this.listeners, listenerToRemove);\n      return this;\n    }\n  }]);\n\n  return Spring;\n}();\n\nSpring._ID = 0;\nSpring.MAX_DELTA_TIME_SEC = 0.064;\nSpring.SOLVER_TIMESTEP_SEC = 0.001;\n/**\n * A set of Springs that all run on the same physics\n * timing loop. To get started with a Rebound animation, first\n * create a new SpringSystem and then add springs to it.\n * @public\n */\n\nvar SpringSystem =\n/*#__PURE__*/\nfunction () {\n  function SpringSystem(looper) {\n    _classCallCheck(this, SpringSystem);\n\n    this.looper = looper || new AnimationLooper();\n    this.looper.springSystem = this;\n    this.listeners = [];\n    this._activeSprings = [];\n    this._idleSpringIndices = [];\n    this._isIdle = true;\n    this._lastTimeMillis = -1;\n    this._springRegistry = {};\n  }\n  /**\n   * Add a new spring to this SpringSystem. This Spring will now be solved for\n   * during the physics iteration loop. By default the spring will use the\n   * default Origami spring config with 40 tension and 7 friction, but you can\n   * also provide your own values here.\n   * @public\n   */\n\n\n  _createClass(SpringSystem, [{\n    key: \"createSpring\",\n    value: function createSpring(tension, friction) {\n      return this.createSpringWithConfig({\n        tension: tension,\n        friction: friction\n      });\n    }\n    /**\n     * Add a spring with the provided SpringConfig.\n     * @public\n     */\n\n  }, {\n    key: \"createSpringWithConfig\",\n    value: function createSpringWithConfig(springConfig) {\n      var spring = new Spring(this);\n      this.registerSpring(spring);\n      spring.setSpringConfig(springConfig);\n      return spring;\n    }\n    /**\n     * Check if a SpringSystem is idle or active. If all of the Springs in the\n     * SpringSystem are at rest, i.e. the physics forces have reached equilibrium,\n     * then this method will return true.\n     * @public\n     */\n\n  }, {\n    key: \"getIsIdle\",\n    value: function getIsIdle() {\n      return this._isIdle;\n    }\n    /**\n     * Manually add a spring to this system. This is called automatically\n     * if a Spring is created with SpringSystem#createSpring.\n     *\n     * This method sets the spring up in the registry so that it can be solved\n     * in the solver loop.\n     * @public\n     */\n\n  }, {\n    key: \"registerSpring\",\n    value: function registerSpring(spring) {\n      this._springRegistry[spring.getId()] = spring;\n    }\n    /**\n     * Deregister a spring with this SpringSystem. The SpringSystem will\n     * no longer consider this Spring during its integration loop once\n     * this is called. This is normally done automatically for you when\n     * you call Spring#destroy.\n     * @public\n     */\n\n  }, {\n    key: \"deregisterSpring\",\n    value: function deregisterSpring(spring) {\n      removeFirst(this._activeSprings, spring);\n      delete this._springRegistry[spring.getId()];\n    }\n  }, {\n    key: \"advance\",\n    value: function advance(time, deltaTime) {\n      var _this = this;\n\n      while (this._idleSpringIndices.length > 0) {\n        this._idleSpringIndices.pop();\n      }\n\n      this._activeSprings.filter(Boolean).forEach(function (spring) {\n        if (spring.systemShouldAdvance()) {\n          spring.advance(time / 1000.0, deltaTime / 1000.0);\n        } else {\n          _this._idleSpringIndices.push(_this._activeSprings.indexOf(spring));\n        }\n      });\n\n      while (this._idleSpringIndices.length > 0) {\n        var idx = this._idleSpringIndices.pop();\n\n        idx >= 0 && this._activeSprings.splice(idx, 1);\n      }\n    }\n    /**\n     * This is the main solver loop called to move the simulation\n     * forward through time. Before each pass in the solver loop\n     * onBeforeIntegrate is called on an any listeners that have\n     * registered themeselves with the SpringSystem. This gives you\n     * an opportunity to apply any constraints or adjustments to\n     * the springs that should be enforced before each iteration\n     * loop. Next the advance method is called to move each Spring in\n     * the systemShouldAdvance forward to the current time. After the\n     * integration step runs in advance, onAfterIntegrate is called\n     * on any listeners that have registered themselves with the\n     * SpringSystem. This gives you an opportunity to run any post\n     * integration constraints or adjustments on the Springs in the\n     * SpringSystem.\n     * @public\n     */\n\n  }, {\n    key: \"loop\",\n    value: function loop(currentTimeMillis) {\n      var listener;\n\n      if (this._lastTimeMillis === -1) {\n        this._lastTimeMillis = currentTimeMillis - 1;\n      }\n\n      var ellapsedMillis = currentTimeMillis - this._lastTimeMillis;\n      this._lastTimeMillis = currentTimeMillis;\n      var i = 0;\n      var len = this.listeners.length;\n\n      for (i = 0; i < len; i++) {\n        listener = this.listeners[i];\n        listener.onBeforeIntegrate && listener.onBeforeIntegrate(this);\n      }\n\n      this.advance(currentTimeMillis, ellapsedMillis);\n\n      if (this._activeSprings.length === 0) {\n        this._isIdle = true;\n        this._lastTimeMillis = -1;\n      }\n\n      for (i = 0; i < len; i++) {\n        listener = this.listeners[i];\n        listener.onAfterIntegrate && listener.onAfterIntegrate(this);\n      }\n\n      if (!this._isIdle) {\n        this.looper.run();\n      }\n    }\n    /**\n     * Used to notify the SpringSystem that a Spring has become displaced.\n     * The system responds by starting its solver loop up if it is currently idle.\n     */\n\n  }, {\n    key: \"activateSpring\",\n    value: function activateSpring(springId) {\n      var spring = this._springRegistry[springId];\n\n      if (this._activeSprings.indexOf(spring) === -1) {\n        this._activeSprings.push(spring);\n      }\n\n      if (this.getIsIdle()) {\n        this._isIdle = false;\n        this.looper.run();\n      }\n    }\n  }]);\n\n  return SpringSystem;\n}();\n/**\n *  Copyright (c) 2013, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n *\n *      \n */\n// this should get created only 1x\n\n\nvar springSystem = new SpringSystem();\n\nvar createSuspendedSpring = function createSuspendedSpring(_a) {\n  var _b = _a.springConfig,\n      stiffness = _b.stiffness,\n      damping = _b.damping,\n      overshootClamping = _b.overshootClamping,\n      noOp = _a.noOp,\n      onSpringActivate = _a.onSpringActivate,\n      getOnUpdateFunc = _a.getOnUpdateFunc,\n      onAnimationEnd = _a.onAnimationEnd;\n\n  if (noOp) {\n    return null;\n  }\n\n  var spring = springSystem.createSpring(stiffness, damping);\n  spring.setOvershootClampingEnabled(!!overshootClamping);\n  spring.addListener({\n    onSpringActivate: onSpringActivate,\n    onSpringUpdate: getOnUpdateFunc(spring.destroy.bind(spring)),\n    onSpringAtRest: function onSpringAtRest() {\n      // prevent SpringSystem from caching unused springs\n      spring.destroy();\n      onAnimationEnd();\n    }\n  });\n  return spring;\n};\n\nvar createSpring = function createSpring(flipped) {\n  var spring = createSuspendedSpring(flipped);\n\n  if (spring) {\n    spring.setEndValue(1);\n  } else {\n    // even if it was a noop,\n    // we still need to call onSpringActivate in case it calls\n    // cascading flip initiation functions\n    flipped.onSpringActivate();\n  }\n};\n\nvar staggeredSprings = function staggeredSprings(flippedArray, staggerConfig) {\n  if (staggerConfig === void 0) {\n    staggerConfig = {};\n  }\n\n  if (!flippedArray || !flippedArray.length) {\n    return;\n  }\n\n  if (staggerConfig.reverse) {\n    flippedArray.reverse();\n  }\n\n  var normalizedSpeed = staggerConfig.speed ? 1 + Math.max(Math.min(staggerConfig.speed, 0), 1) : 1.1;\n  var nextThreshold = 1 / Math.max(Math.min(flippedArray.length, 100), 10);\n  var springFuncs = flippedArray.filter(function (flipped) {\n    return !flipped.noOp;\n  }).map(function (flipped, i) {\n    var cachedGetOnUpdate = flipped.getOnUpdateFunc; // modify the update function to adjust\n    // the end value of the trailing Flipped component\n\n    flipped.getOnUpdateFunc = function (stop) {\n      var onUpdate = cachedGetOnUpdate(stop);\n      return function (spring) {\n        var currentValue = spring.getCurrentValue();\n\n        if (currentValue > nextThreshold) {\n          if (springFuncs[i + 1]) {\n            springFuncs[i + 1].setEndValue(Math.min(currentValue * normalizedSpeed, 1));\n          }\n        } // now call the actual update function\n\n\n        onUpdate(spring);\n      };\n    };\n\n    return flipped;\n  }).map(function (flipped) {\n    return createSuspendedSpring(flipped);\n  });\n\n  if (springFuncs[0]) {\n    springFuncs[0].setEndValue(1);\n  }\n};\n\nvar initiateImmediateAnimations = function initiateImmediateAnimations(immediate) {\n  if (!immediate) {\n    return;\n  }\n\n  immediate.forEach(function (flipped) {\n    createSpring(flipped);\n    initiateImmediateAnimations(flipped.immediateChildren);\n  });\n};\n\nvar createCallTree = function createCallTree(_a) {\n  var flipDataDict = _a.flipDataDict,\n      topLevelChildren = _a.topLevelChildren,\n      initiateStaggeredAnimations = _a.initiateStaggeredAnimations; // build a data struct to run the springs\n\n  var tree = {\n    root: {\n      staggeredChildren: {},\n      immediateChildren: []\n    }\n  }; // helper function to build the nested structure\n\n  var appendChild = function appendChild(parent, childId) {\n    var flipData = flipDataDict[childId]; // might have been filtered (e.g. because it was off screen)\n\n    if (!flipData) {\n      return;\n    }\n\n    if (flipData.stagger) {\n      parent.staggeredChildren[flipData.stagger] ? parent.staggeredChildren[flipData.stagger].push(flipData) : parent.staggeredChildren[flipData.stagger] = [flipData];\n    } else {\n      parent.immediateChildren.push(flipData);\n    } // only when the spring is first activated, activate the child animations as well\n    // this enables nested stagger\n\n\n    flipData.onSpringActivate = function () {\n      initiateImmediateAnimations(flipData.immediateChildren);\n      initiateStaggeredAnimations(flipData.staggeredChildren);\n    };\n\n    flipData.staggeredChildren = {};\n    flipData.immediateChildren = [];\n    flipData.childIds.forEach(function (childId) {\n      return appendChild(flipData, childId);\n    });\n  }; // create the nested structure\n\n\n  topLevelChildren.forEach(function (c) {\n    appendChild(tree.root, c);\n  });\n  return tree;\n};\n\nvar initiateAnimations = function initiateAnimations(_a) {\n  var staggerConfig = _a.staggerConfig,\n      flipDataDict = _a.flipDataDict,\n      topLevelChildren = _a.topLevelChildren;\n\n  var initiateStaggeredAnimations = function initiateStaggeredAnimations(staggered) {\n    if (!staggered || !Object.keys(staggered).length) {\n      return;\n    }\n\n    Object.keys(staggered).forEach(function (staggerKey) {\n      return staggeredSprings(staggered[staggerKey], staggerConfig[staggerKey]);\n    });\n  };\n\n  var tree = createCallTree({\n    flipDataDict: flipDataDict,\n    topLevelChildren: topLevelChildren,\n    initiateStaggeredAnimations: initiateStaggeredAnimations\n  });\n  initiateImmediateAnimations(tree.root.immediateChildren);\n  initiateStaggeredAnimations(tree.root.staggeredChildren);\n}; // 3d transforms were causing weird issues in chrome,\n// especially when opacity was also being tweened,\n// so convert to a 2d matrix\n\n\nvar convertMatrix3dArrayTo2dArray = function convertMatrix3dArrayTo2dArray(matrix) {\n  return [0, 1, 4, 5, 12, 13].map(function (index) {\n    return matrix[index];\n  });\n};\n\nvar convertMatrix2dArrayToString = function convertMatrix2dArrayToString(matrix) {\n  return \"matrix(\" + matrix.join(', ') + \")\";\n};\n\nvar invertTransformsForChildren = function invertTransformsForChildren(_a) {\n  var invertedChildren = _a.invertedChildren,\n      matrix = _a.matrix,\n      body = _a.body;\n  invertedChildren.forEach(function (_a) {\n    var child = _a[0],\n        childFlipConfig = _a[1];\n\n    if (!body.contains(child)) {\n      return;\n    }\n\n    var scaleX$$1 = matrix[0];\n    var scaleY$$1 = matrix[3];\n    var translateX$$1 = matrix[4];\n    var translateY$$1 = matrix[5];\n    var inverseVals = {\n      translateX: 0,\n      translateY: 0,\n      scaleX: 1,\n      scaleY: 1\n    };\n    var transformString = '';\n\n    if (childFlipConfig.translate) {\n      inverseVals.translateX = -translateX$$1 / scaleX$$1;\n      inverseVals.translateY = -translateY$$1 / scaleY$$1;\n      transformString += \"translate(\" + inverseVals.translateX + \"px, \" + inverseVals.translateY + \"px)\";\n    }\n\n    if (childFlipConfig.scale) {\n      inverseVals.scaleX = 1 / scaleX$$1;\n      inverseVals.scaleY = 1 / scaleY$$1;\n      transformString += \" scale(\" + inverseVals.scaleX + \", \" + inverseVals.scaleY + \")\";\n    }\n\n    child.style.transform = transformString;\n  });\n};\n\nvar createApplyStylesFunc = function createApplyStylesFunc(_a) {\n  var element = _a.element,\n      invertedChildren = _a.invertedChildren,\n      body = _a.body,\n      retainTransform = _a.retainTransform;\n  return function (_a) {\n    var matrix = _a.matrix,\n        opacity = _a.opacity,\n        forceMinVals = _a.forceMinVals;\n\n    if (isNumber(opacity)) {\n      element.style.opacity = opacity + '';\n    }\n\n    if (forceMinVals) {\n      element.style.minHeight = '1px';\n      element.style.minWidth = '1px';\n    }\n\n    if (!matrix) {\n      return;\n    }\n\n    var identityTransform = 'matrix(1, 0, 0, 1, 0, 0)';\n    var transformWithInvisibleSkew = 'matrix(1, 0.00001, -0.00001, 1, 0, 0)';\n    var stringTransform = convertMatrix2dArrayToString(matrix);\n\n    if (retainTransform && stringTransform === identityTransform) {\n      stringTransform = transformWithInvisibleSkew;\n    }\n\n    element.style.transform = stringTransform;\n\n    if (invertedChildren) {\n      invertTransformsForChildren({\n        invertedChildren: invertedChildren,\n        matrix: matrix,\n        body: body\n      });\n    }\n  };\n};\n\nvar rectInViewport = function rectInViewport(_a) {\n  var top = _a.top,\n      bottom = _a.bottom,\n      left = _a.left,\n      right = _a.right;\n  return top < window.innerHeight && bottom > 0 && left < window.innerWidth && right > 0;\n};\n\nvar getInvertedChildren = function getInvertedChildren(element, id) {\n  return toArray(element.querySelectorAll(\"[\" + DATA_INVERSE_FLIP_ID + \"=\\\"\" + id + \"\\\"]\"));\n};\n\nvar tweenProp = function tweenProp(start, end, position) {\n  return start + (end - start) * position;\n};\n\nvar animateFlippedElements = function animateFlippedElements(_a) {\n  var flippedIds = _a.flippedIds,\n      flipCallbacks = _a.flipCallbacks,\n      inProgressAnimations = _a.inProgressAnimations,\n      flippedElementPositionsBeforeUpdate = _a.flippedElementPositionsBeforeUpdate,\n      flippedElementPositionsAfterUpdate = _a.flippedElementPositionsAfterUpdate,\n      applyTransformOrigin = _a.applyTransformOrigin,\n      spring = _a.spring,\n      getElement = _a.getElement,\n      debug = _a.debug,\n      staggerConfig = _a.staggerConfig,\n      _b = _a.decisionData,\n      decisionData = _b === void 0 ? {} : _b,\n      scopedSelector = _a.scopedSelector,\n      retainTransform = _a.retainTransform,\n      onComplete = _a.onComplete; // the stuff below is used so we can return a promise that resolves when all FLIP animations have\n  // completed\n\n  var closureResolve;\n  var flipCompletedPromise = new Promise(function (resolve) {\n    closureResolve = resolve;\n  }); // hook for users of lib to attach logic when all flip animations have completed\n\n  if (onComplete) {\n    flipCompletedPromise.then(onComplete);\n  }\n\n  if (!flippedIds.length) {\n    return function () {\n      closureResolve([]);\n      return flipCompletedPromise;\n    };\n  }\n\n  var withInitFuncs;\n  var completedAnimationIds = [];\n  var firstElement = getElement(flippedIds[0]); // special handling for iframes\n\n  var body = firstElement ? firstElement.ownerDocument.querySelector('body') : document.querySelector('body');\n\n  if (debug) {\n    // eslint-disable-next-line no-console\n    console.error('[react-flip-toolkit]\\nThe \"debug\" prop is set to true. All FLIP animations will return at the beginning of the transition.');\n  }\n\n  var duplicateFlipIds = getDuplicateValsAsStrings(flippedIds);\n\n  if (duplicateFlipIds.length) {\n    // eslint-disable-next-line no-console\n    console.error(\"[react-flip-toolkit]\\nThere are currently multiple elements with the same flipId on the page.\\nThe animation will only work if each Flipped component has a unique flipId.\\nDuplicate flipId\" + (duplicateFlipIds.length > 1 ? 's' : '') + \": \" + duplicateFlipIds.join('\\n'));\n  }\n\n  var flipDataArray = flippedIds // take all the measurements we need\n  // and return an object with animation functions + necessary data\n  .map(function (id) {\n    var prevRect = flippedElementPositionsBeforeUpdate[id].rect;\n    var currentRect = flippedElementPositionsAfterUpdate[id].rect;\n    var prevOpacity = flippedElementPositionsBeforeUpdate[id].opacity;\n    var currentOpacity = flippedElementPositionsAfterUpdate[id].opacity;\n    var needsForcedMinVals = currentRect.width < 1 || currentRect.height < 1; // don't animate elements outside of the user's viewport\n\n    if (!rectInViewport(prevRect) && !rectInViewport(currentRect)) {\n      return false;\n    } // it's never going to be visible, so dont animate it\n\n\n    if (prevRect.width === 0 && currentRect.width === 0 || prevRect.height === 0 && currentRect.height === 0) {\n      return false;\n    }\n\n    var element = getElement(id); // this might happen if we are rapidly adding & removing elements(?)\n\n    if (!element) {\n      return false;\n    }\n\n    var flipConfig = JSON.parse(element.dataset.flipConfig);\n    var springConfig = getSpringConfig({\n      flipperSpring: spring,\n      flippedSpring: flipConfig.spring\n    });\n    var stagger = flipConfig.stagger === true ? 'default' : flipConfig.stagger;\n    var toReturn = {\n      element: element,\n      id: id,\n      stagger: stagger,\n      springConfig: springConfig,\n      noOp: true\n    };\n\n    if (flipCallbacks[id] && flipCallbacks[id].shouldFlip) {\n      var elementShouldFlip = flipCallbacks[id].shouldFlip(decisionData.prev, decisionData.current); // this element wont be animated, but its children might be\n\n      if (!elementShouldFlip) {\n        return toReturn;\n      }\n    } // don't animate elements that didn't visbly change\n    // but possibly animate their children\n\n\n    var transformDifference = Math.abs(prevRect.left - currentRect.left) + Math.abs(prevRect.top - currentRect.top);\n    var sizeDifference = Math.abs(prevRect.width - currentRect.width) + Math.abs(prevRect.height - currentRect.height);\n    var opacityDifference = Math.abs(currentOpacity - prevOpacity);\n\n    if (transformDifference < 0.5 && sizeDifference < 0.5 && opacityDifference < 0.01) {\n      // this element wont be animated, but its children might be\n      return toReturn;\n    }\n\n    toReturn.noOp = false;\n    var currentTransform = parse(flippedElementPositionsAfterUpdate[id].transform);\n    var toVals = {\n      matrix: currentTransform\n    };\n    var fromVals = {\n      matrix: []\n    };\n    var transformsArray = [currentTransform]; // we're only going to animate the values that the child wants animated\n\n    if (flipConfig.translate) {\n      transformsArray.push(translateX(prevRect.left - currentRect.left));\n      transformsArray.push(translateY(prevRect.top - currentRect.top));\n    } // going any smaller than 1px breaks transitions in Chrome\n\n\n    if (flipConfig.scale) {\n      transformsArray.push(scaleX(Math.max(prevRect.width, 1) / Math.max(currentRect.width, 1)));\n      transformsArray.push(scaleY(Math.max(prevRect.height, 1) / Math.max(currentRect.height, 1)));\n    }\n\n    if (flipConfig.opacity) {\n      fromVals.opacity = prevOpacity;\n      toVals.opacity = currentOpacity;\n    }\n\n    var invertedChildren = [];\n\n    if (!flipCallbacks[id] || !flipCallbacks[id].shouldInvert || flipCallbacks[id].shouldInvert(decisionData.prev, decisionData.current)) {\n      var invertedChildElements = getInvertedChildren(element, id);\n      invertedChildren = invertedChildElements.map(function (c) {\n        return [c, JSON.parse(c.dataset.flipConfig)];\n      });\n    }\n\n    fromVals.matrix = convertMatrix3dArrayTo2dArray(transformsArray.reduce(multiply));\n    toVals.matrix = convertMatrix3dArrayTo2dArray(toVals.matrix);\n    var applyStyles = createApplyStylesFunc({\n      element: element,\n      invertedChildren: invertedChildren,\n      body: body,\n      retainTransform: retainTransform\n    });\n    var onComplete;\n\n    if (flipCallbacks[id] && flipCallbacks[id].onComplete) {\n      // must cache or else this could cause an error\n      var cachedOnComplete_1 = flipCallbacks[id].onComplete;\n\n      onComplete = function onComplete() {\n        return cachedOnComplete_1(element, decisionData.prev, decisionData.current);\n      };\n    } // this should be called when animation ends naturally\n    // but also when it is interrupted\n    // when it is called, the animation has already been cancelled\n\n\n    var onAnimationEnd = function onAnimationEnd() {\n      delete inProgressAnimations[id];\n\n      if (isFunction(onComplete)) {\n        onComplete();\n      } // remove identity transform -- this should have no effect on layout\n\n\n      element.style.transform = '';\n\n      if (needsForcedMinVals && element) {\n        element.style.minHeight = '';\n        element.style.minWidth = '';\n      }\n\n      completedAnimationIds.push(id);\n\n      if (completedAnimationIds.length >= withInitFuncs.length) {\n        // we can theoretically call multiple times since a promise only resolves 1x\n        // but that shouldnt happen\n        closureResolve(completedAnimationIds);\n      }\n    };\n\n    var animateOpacity = isNumber(fromVals.opacity) && isNumber(toVals.opacity) && fromVals.opacity !== toVals.opacity;\n    var onStartCalled = false;\n\n    var getOnUpdateFunc = function getOnUpdateFunc(stop) {\n      inProgressAnimations[id] = {\n        stop: stop,\n        onComplete: onComplete\n      };\n\n      var onUpdate = function onUpdate(spring) {\n        if (flipCallbacks[id] && flipCallbacks[id].onSpringUpdate) {\n          flipCallbacks[id].onSpringUpdate(spring.getCurrentValue());\n        } // trigger the user provided onStart function\n\n\n        if (!onStartCalled) {\n          onStartCalled = true;\n\n          if (flipCallbacks[id] && flipCallbacks[id].onStart) {\n            flipCallbacks[id].onStart(element, decisionData.prev, decisionData.current);\n          }\n        }\n\n        var currentValue = spring.getCurrentValue();\n\n        if (!body.contains(element)) {\n          stop();\n          return;\n        }\n\n        var vals = {\n          matrix: []\n        };\n        vals.matrix = fromVals.matrix.map(function (fromVal, index) {\n          return tweenProp(fromVal, toVals.matrix[index], currentValue);\n        });\n\n        if (animateOpacity) {\n          vals.opacity = tweenProp(fromVals.opacity, toVals.opacity, currentValue);\n        }\n\n        applyStyles(vals);\n      };\n\n      return onUpdate;\n    };\n\n    var initializeFlip = function initializeFlip() {\n      // before animating, immediately apply FLIP styles to prevent flicker\n      applyStyles({\n        matrix: fromVals.matrix,\n        opacity: animateOpacity ? fromVals.opacity : undefined,\n        forceMinVals: needsForcedMinVals\n      });\n\n      if (flipCallbacks[id] && flipCallbacks[id].onStartImmediate) {\n        flipCallbacks[id].onStartImmediate(element, decisionData.prev, decisionData.current);\n      } // and batch any other style updates if necessary\n\n\n      if (flipConfig.transformOrigin) {\n        element.style.transformOrigin = flipConfig.transformOrigin;\n      } else if (applyTransformOrigin) {\n        element.style.transformOrigin = '0 0';\n      }\n\n      invertedChildren.forEach(function (_a) {\n        var child = _a[0],\n            childFlipConfig = _a[1];\n\n        if (childFlipConfig.transformOrigin) {\n          child.style.transformOrigin = childFlipConfig.transformOrigin;\n        } else if (applyTransformOrigin) {\n          child.style.transformOrigin = '0 0';\n        }\n      });\n    };\n\n    return assign({}, toReturn, {\n      stagger: stagger,\n      springConfig: springConfig,\n      getOnUpdateFunc: getOnUpdateFunc,\n      initializeFlip: initializeFlip,\n      onAnimationEnd: onAnimationEnd\n    });\n  }) // filter out data for all non-animated elements first\n  .filter(function (x) {\n    return x;\n  }); // we use this array to compare with completed animations\n  // to decide when all animations are completed\n\n  withInitFuncs = flipDataArray.filter(function (_a) {\n    var initializeFlip = _a.initializeFlip;\n    return Boolean(initializeFlip);\n  }); //  put items back in place\n\n  withInitFuncs.forEach(function (_a) {\n    var initializeFlip = _a.initializeFlip;\n    return initializeFlip();\n  });\n\n  if (debug) {\n    return function () {};\n  }\n\n  var flipDataDict = flipDataArray.reduce(function (acc, curr) {\n    acc[curr.id] = curr;\n    return acc;\n  }, {}); // this function modifies flipDataDict in-place\n  // by removing references to non-direct children\n  // to enable recursive stagger\n\n  var topLevelChildren = filterFlipDescendants({\n    flipDataDict: flipDataDict,\n    flippedIds: flippedIds,\n    scopedSelector: scopedSelector\n  });\n  return function () {\n    // there are no active FLIP animations, so immediately resolve the\n    // returned promise\n    if (!withInitFuncs.length) {\n      closureResolve([]);\n    }\n\n    initiateAnimations({\n      topLevelChildren: topLevelChildren,\n      flipDataDict: flipDataDict,\n      staggerConfig: staggerConfig\n    });\n    return flipCompletedPromise;\n  };\n};\n\nvar addTupleToObject = function addTupleToObject(acc, curr) {\n  var _a;\n\n  return assign(acc, (_a = {}, _a[curr[0]] = curr[1], _a));\n};\n\nvar getAllElements = function getAllElements(element, portalKey) {\n  if (portalKey) {\n    return toArray(document.querySelectorAll(\"[\" + DATA_PORTAL_KEY + \"=\\\"\" + portalKey + \"\\\"]\"));\n  } else {\n    return toArray(element.querySelectorAll(\"[\" + DATA_FLIP_ID + \"]\"));\n  }\n};\n\nvar getFlippedElementPositionsAfterUpdate = function getFlippedElementPositionsAfterUpdate(_a) {\n  var element = _a.element,\n      portalKey = _a.portalKey;\n  return getAllElements(element, portalKey).map(function (child) {\n    var computedStyle = window.getComputedStyle(child);\n    var rect = child.getBoundingClientRect();\n    return [child.dataset.flipId, {\n      rect: rect,\n      opacity: parseFloat(computedStyle.opacity),\n      transform: computedStyle.transform\n    }];\n  }) // @ts-ignore\n  .reduce(addTupleToObject, {});\n};\n\nvar createScopedSelector = function createScopedSelector(element, portalKey) {\n  if (portalKey) {\n    return function (selector) {\n      return toArray(document.querySelectorAll(\"[\" + DATA_PORTAL_KEY + \"=\" + portalKey + \"]\" + selector));\n    };\n  } else if (element) {\n    return function (selector) {\n      return toArray(element.querySelectorAll(selector));\n    };\n  } else {\n    return function () {\n      return [];\n    };\n  }\n};\n\nvar createGetElementFunc = function createGetElementFunc(element, portalKey) {\n  // this should only ever return 1 element\n  if (!element && !portalKey) {\n    throw new Error('either portalKey or element must be provided');\n  }\n\n  return function (id) {\n    return createScopedSelector(element, portalKey)(\"[\" + DATA_FLIP_ID + \"=\\\"\" + id + \"\\\"]\")[0];\n  };\n};\n\nvar onFlipKeyUpdate = function onFlipKeyUpdate(_a) {\n  var _b = _a.cachedOrderedFlipIds,\n      cachedOrderedFlipIds = _b === void 0 ? [] : _b,\n      _c = _a.inProgressAnimations,\n      inProgressAnimations = _c === void 0 ? {} : _c,\n      _d = _a.flippedElementPositionsBeforeUpdate,\n      flippedElementPositionsBeforeUpdate = _d === void 0 ? {} : _d,\n      _e = _a.flipCallbacks,\n      flipCallbacks = _e === void 0 ? {} : _e,\n      containerEl = _a.containerEl,\n      applyTransformOrigin = _a.applyTransformOrigin,\n      spring = _a.spring,\n      debug = _a.debug,\n      portalKey = _a.portalKey,\n      _f = _a.staggerConfig,\n      staggerConfig = _f === void 0 ? {} : _f,\n      _g = _a.decisionData,\n      decisionData = _g === void 0 ? {} : _g,\n      handleEnterUpdateDelete = _a.handleEnterUpdateDelete,\n      retainTransform = _a.retainTransform,\n      onComplete = _a.onComplete;\n  var flippedElementPositionsAfterUpdate = getFlippedElementPositionsAfterUpdate({\n    element: containerEl,\n    portalKey: portalKey\n  });\n  var scopedSelector = createScopedSelector(containerEl, portalKey);\n  var getElement = createGetElementFunc(containerEl, portalKey);\n\n  var isFlipped = function isFlipped(id) {\n    return flippedElementPositionsBeforeUpdate[id] && flippedElementPositionsAfterUpdate[id];\n  };\n\n  var unflippedIds = Object.keys(flippedElementPositionsBeforeUpdate).concat(Object.keys(flippedElementPositionsAfterUpdate)).filter(function (id) {\n    return !isFlipped(id);\n  });\n  var baseArgs = {\n    flipCallbacks: flipCallbacks,\n    getElement: getElement,\n    flippedElementPositionsBeforeUpdate: flippedElementPositionsBeforeUpdate,\n    flippedElementPositionsAfterUpdate: flippedElementPositionsAfterUpdate,\n    inProgressAnimations: inProgressAnimations\n  }; // @ts-ignore\n\n  var animateUnFlippedElementsArgs = assign({}, baseArgs, {\n    unflippedIds: unflippedIds\n  });\n\n  var _h = animateUnflippedElements(animateUnFlippedElementsArgs),\n      hideEnteringElements = _h.hideEnteringElements,\n      animateEnteringElements = _h.animateEnteringElements,\n      animateExitingElements = _h.animateExitingElements;\n\n  var flippedIds = cachedOrderedFlipIds.filter(isFlipped); // @ts-ignore\n\n  var animateFlippedElementsArgs = assign({}, baseArgs, {\n    flippedIds: flippedIds,\n    applyTransformOrigin: applyTransformOrigin,\n    spring: spring,\n    debug: debug,\n    staggerConfig: staggerConfig,\n    decisionData: decisionData,\n    scopedSelector: scopedSelector,\n    retainTransform: retainTransform,\n    onComplete: onComplete\n  }); // the function handles putting flipped elements back in their original positions\n  // and returns another function to actually call the flip animation\n\n  var flip = animateFlippedElements(animateFlippedElementsArgs); // clear temp markup that was added to facilitate FLIP\n  // namely, in the filterFlipDescendants function\n\n  unflippedIds.filter(function (id) {\n    return flippedElementPositionsAfterUpdate[id];\n  }).forEach(function (id) {\n    var element = getElement(id);\n\n    if (element) {\n      element.removeAttribute(DATA_IS_APPEARING);\n    }\n  });\n\n  if (handleEnterUpdateDelete) {\n    handleEnterUpdateDelete({\n      hideEnteringElements: hideEnteringElements,\n      animateEnteringElements: animateEnteringElements,\n      animateExitingElements: animateExitingElements,\n      animateFlippedElements: flip\n    });\n  } else {\n    hideEnteringElements();\n    animateExitingElements().then(animateEnteringElements);\n    flip();\n  }\n};\n\nvar cancelInProgressAnimations = function cancelInProgressAnimations(inProgressAnimations) {\n  Object.keys(inProgressAnimations).forEach(function (id) {\n    if (inProgressAnimations[id].stop) {\n      inProgressAnimations[id].stop();\n    }\n\n    delete inProgressAnimations[id];\n  });\n};\n\nvar getFlippedElementPositionsBeforeUpdate = function getFlippedElementPositionsBeforeUpdate(_a) {\n  var element = _a.element,\n      _b = _a.flipCallbacks,\n      flipCallbacks = _b === void 0 ? {} : _b,\n      _c = _a.inProgressAnimations,\n      inProgressAnimations = _c === void 0 ? {} : _c,\n      portalKey = _a.portalKey;\n  var flippedElements = getAllElements(element, portalKey);\n  var inverseFlippedElements = toArray(element.querySelectorAll(\"[\" + DATA_INVERSE_FLIP_ID + \"]\"));\n  var childIdsToParentBCRs = {};\n  var parentBCRs = [];\n  var childIdsToParents = {}; // this is for exit animations so we can re-insert exiting elements in the\n  // DOM later\n\n  flippedElements.filter(function (el) {\n    return flipCallbacks && flipCallbacks[el.dataset.flipId] && flipCallbacks[el.dataset.flipId].onExit;\n  }).forEach(function (el) {\n    var parent = el.parentNode; // this won't work for IE11\n\n    if (el.closest) {\n      var exitContainer = el.closest(\"[\" + DATA_EXIT_CONTAINER + \"]\");\n\n      if (exitContainer) {\n        parent = exitContainer;\n      }\n    }\n\n    var bcrIndex = parentBCRs.findIndex(function (n) {\n      return n[0] === parent;\n    });\n\n    if (bcrIndex === -1) {\n      parentBCRs.push([parent, parent.getBoundingClientRect()]);\n      bcrIndex = parentBCRs.length - 1;\n    }\n\n    childIdsToParentBCRs[el.dataset.flipId] = parentBCRs[bcrIndex][1];\n    childIdsToParents[el.dataset.flipId] = parent;\n  });\n  var flippedElementPositions = flippedElements.map(function (child) {\n    var domDataForExitAnimations = {};\n    var childBCR = child.getBoundingClientRect(); // only cache extra data for exit animations\n    // if the element has an onExit listener\n\n    if (flipCallbacks && flipCallbacks[child.dataset.flipId] && flipCallbacks[child.dataset.flipId].onExit) {\n      var parentBCR = childIdsToParentBCRs[child.dataset.flipId];\n      assign(domDataForExitAnimations, {\n        element: child,\n        parent: childIdsToParents[child.dataset.flipId],\n        childPosition: {\n          top: childBCR.top - parentBCR.top,\n          left: childBCR.left - parentBCR.left,\n          width: childBCR.width,\n          height: childBCR.height\n        }\n      });\n    }\n\n    return [child.dataset.flipId, {\n      rect: childBCR,\n      opacity: parseFloat(window.getComputedStyle(child).opacity || '1'),\n      domDataForExitAnimations: domDataForExitAnimations\n    }];\n  }) // @ts-ignore\n  .reduce(addTupleToObject, {}); // do this at the very end since we want to cache positions of elements\n  // while they are mid-transition\n\n  cancelInProgressAnimations(inProgressAnimations);\n  flippedElements.concat(inverseFlippedElements).forEach(function (el) {\n    el.style.transform = '';\n    el.style.opacity = '';\n  });\n  return {\n    flippedElementPositions: flippedElementPositions,\n    cachedOrderedFlipIds: flippedElements.map(function (el) {\n      return el.dataset.flipId;\n    })\n  };\n};\n\nvar FlipContext = createContext({});\nvar PortalContext = createContext('portal');\n\nvar Flipper =\n/** @class */\nfunction (_super) {\n  __extends(Flipper, _super);\n\n  function Flipper() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.inProgressAnimations = {};\n    _this.flipCallbacks = {};\n    _this.el = undefined;\n    return _this;\n  }\n\n  Flipper.prototype.getSnapshotBeforeUpdate = function (prevProps) {\n    if (prevProps.flipKey !== this.props.flipKey && this.el) {\n      return getFlippedElementPositionsBeforeUpdate({\n        element: this.el,\n        // if onExit callbacks exist here, we'll cache the DOM node\n        flipCallbacks: this.flipCallbacks,\n        inProgressAnimations: this.inProgressAnimations,\n        portalKey: this.props.portalKey\n      });\n    }\n\n    return null;\n  };\n\n  Flipper.prototype.componentDidUpdate = function (prevProps, _prevState, cachedData) {\n    if (this.props.flipKey !== prevProps.flipKey && this.el) {\n      onFlipKeyUpdate({\n        flippedElementPositionsBeforeUpdate: cachedData.flippedElementPositions,\n        cachedOrderedFlipIds: cachedData.cachedOrderedFlipIds,\n        containerEl: this.el,\n        inProgressAnimations: this.inProgressAnimations,\n        flipCallbacks: this.flipCallbacks,\n        applyTransformOrigin: this.props.applyTransformOrigin,\n        spring: this.props.spring,\n        debug: this.props.debug,\n        portalKey: this.props.portalKey,\n        staggerConfig: this.props.staggerConfig,\n        handleEnterUpdateDelete: this.props.handleEnterUpdateDelete,\n        // typescript doesn't recognize defaultProps (?)\n        retainTransform: this.props.retainTransform,\n        decisionData: {\n          prev: prevProps.decisionData,\n          current: this.props.decisionData\n        },\n        onComplete: this.props.onComplete\n      });\n    }\n  };\n\n  Flipper.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        element = _a.element,\n        className = _a.className,\n        portalKey = _a.portalKey;\n    var Element = element;\n    var FlipperBase = React.createElement(FlipContext.Provider, {\n      value: this.flipCallbacks\n    }, React.createElement(Element, {\n      className: className,\n      ref: function ref(el) {\n        return _this.el = el;\n      }\n    }, this.props.children));\n\n    if (portalKey) {\n      return React.createElement(PortalContext.Provider, {\n        value: portalKey\n      }, FlipperBase);\n    } else {\n      return FlipperBase;\n    }\n  };\n\n  Flipper.defaultProps = {\n    applyTransformOrigin: true,\n    element: 'div',\n    retainTransform: false\n  };\n  return Flipper;\n}(Component);\n\nvar propTypes = {\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n  inverseFlipId: PropTypes.string,\n  flipId: PropTypes.string,\n  opacity: PropTypes.bool,\n  translate: PropTypes.bool,\n  scale: PropTypes.bool,\n  transformOrigin: PropTypes.string,\n  spring: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  onStart: PropTypes.func,\n  onComplete: PropTypes.func,\n  onAppear: PropTypes.func,\n  onSpringUpdate: PropTypes.func,\n  shouldFlip: PropTypes.func,\n  shouldInvert: PropTypes.func,\n  onExit: PropTypes.func,\n  portalKey: PropTypes.string,\n  stagger: PropTypes.oneOfType([PropTypes.string, PropTypes.bool])\n};\n\nfunction isFunction$1(child) {\n  return typeof child === 'function';\n} // This wrapper creates child components for the main Flipper component\n\n\nvar Flipped = function Flipped(_a) {\n  var children = _a.children,\n      flipId = _a.flipId,\n      inverseFlipId = _a.inverseFlipId,\n      portalKey = _a.portalKey,\n      rest = __rest(_a, [\"children\", \"flipId\", \"inverseFlipId\", \"portalKey\"]);\n\n  var _b;\n\n  var child = children;\n  var isFunctionAsChildren = isFunction$1(child);\n\n  if (!isFunctionAsChildren) {\n    try {\n      child = Children.only(children);\n    } catch (e) {\n      throw new Error('Each Flipped component must wrap a single child');\n    }\n  } // if nothing is being animated, assume everything is being animated\n\n\n  if (!rest.scale && !rest.translate && !rest.opacity) {\n    assign(rest, {\n      translate: true,\n      scale: true,\n      opacity: true\n    });\n  }\n\n  var dataAttributes = (_b = {}, // these are both used as selectors so they have to be separate\n  _b[DATA_FLIP_ID] = flipId, _b[DATA_INVERSE_FLIP_ID] = inverseFlipId, _b[DATA_FLIP_CONFIG] = JSON.stringify(rest), _b);\n\n  if (portalKey) {\n    dataAttributes[DATA_PORTAL_KEY] = portalKey;\n  }\n\n  if (isFunctionAsChildren) {\n    return child(dataAttributes);\n  }\n\n  return cloneElement(child, dataAttributes);\n}; // @ts-ignore\n\n\nvar FlippedWithContext = function FlippedWithContext(_a) {\n  var children = _a.children,\n      flipId = _a.flipId,\n      shouldFlip = _a.shouldFlip,\n      shouldInvert = _a.shouldInvert,\n      onAppear = _a.onAppear,\n      onStart = _a.onStart,\n      onStartImmediate = _a.onStartImmediate,\n      onComplete = _a.onComplete,\n      onExit = _a.onExit,\n      onSpringUpdate = _a.onSpringUpdate,\n      rest = __rest(_a, [\"children\", \"flipId\", \"shouldFlip\", \"shouldInvert\", \"onAppear\", \"onStart\", \"onStartImmediate\", \"onComplete\", \"onExit\", \"onSpringUpdate\"]);\n\n  if (!children) {\n    return null;\n  }\n\n  if (rest.inverseFlipId) {\n    return React.createElement(Flipped, _assign({}, rest), children);\n  }\n\n  return React.createElement(PortalContext.Consumer, null, function (portalKey) {\n    return React.createElement(FlipContext.Consumer, null, function (data) {\n      // if there is no surrounding Flipper component,\n      // we don't want to throw an error, so check\n      // that data exists and is not the default string\n      if (isObject(data)) {\n        // @ts-ignore\n        data[flipId] = {\n          shouldFlip: shouldFlip,\n          shouldInvert: shouldInvert,\n          onAppear: onAppear,\n          onStart: onStart,\n          onStartImmediate: onStartImmediate,\n          onComplete: onComplete,\n          onExit: onExit,\n          onSpringUpdate: onSpringUpdate\n        };\n      }\n\n      return React.createElement(Flipped, _assign({\n        flipId: flipId\n      }, rest, {\n        portalKey: portalKey\n      }), children);\n    });\n  });\n};\n\nvar ExitContainer = function ExitContainer(_a) {\n  var children = _a.children;\n\n  var _b;\n\n  return cloneElement(children, (_b = {}, _b[DATA_EXIT_CONTAINER] = true, _b));\n}; // for umd build\n\n\nvar index = {\n  Flipper: Flipper,\n  Flipped: FlippedWithContext,\n  ExitContainer: ExitContainer\n};\nexport default index;\nexport { Flipper, FlippedWithContext as Flipped, ExitContainer };","map":null,"metadata":{},"sourceType":"module"}